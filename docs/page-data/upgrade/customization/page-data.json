{"componentChunkName":"component---src-pages-upgrade-customization-mdx","path":"/upgrade/customization/","result":{"pageContext":{"frontmatter":{"title":"Customization"},"relativePagePath":"/upgrade/customization.mdx","titleType":"append","MdxNode":{"id":"d5df18e0-c0f0-5068-a4f3-c8e9fe4e751e","children":[],"parent":"60842377-2a5c-5645-9d20-54f22bebc2f3","internal":{"content":"---\ntitle: Customization\n---           \n\nAll customer specific changes should be included in a customization archive. For example, Java Classes, XMLs, database scripts. The customization archive will be created by a customer and will be placed in a location accessible to MAS during deployment. The structure of customization archive is same as the Maximo folder structure. The customization archive should be tested in a development/test environment before applying to production environment.       \n## Customization Process\nThe following diagram shows the customization process.\n\n![image](images/customizationflow.png)\n\n<p></p>\n\n- **Prepare DB:** Prepare test database as a duplicate of the existing Maximo production database.\n- **Customization Archive:** Create a customization archive by following the steps in the Customization Archive section.\n  - If customization includes web.xml (For example, customer servlet, filters, change in ordering pf the servlet startup, context params, session timeout etc.) then \n     - Install a new Manage 8.0 (with IS and Add-ons) without customization on empty database.\n     - Extract the web.xml (For example, oc rsync command can be used to retrieve the web.xmlß)\n     - Apply your changes. \n     - Copy the web.xml to the customization archive in the appropriate directory.\n- **Deploy:** Use MAS UI/API to configure the Manage, Industry Solutions/Add-Ons to point to the to be upgraded database, and other configurations. Specify the location of the customization archive. Deploy the Manage application.\n- **Activate:** Activate the Manage application. It will update the database and deploy workloads to the liberty containers.\n- **Test:** Test, if any problem is found go to the next step and continue.\n- **Error:** Using the admin image container in the OpenShift env, copy the entire build directory to a local dev machine with the customization and compile. \nAfter fixing errors, create customization archive again with the updated code. Deploy and Activate the Manage application.\n\nOn successful testing, use the customization archive in the production environment.\n\n## Customization Archive \n\nFollow the steps to create customization archive:\n- Follow the existing SMP/Maximo folder structure to create a customization folder.\n- Copy class files (java customization) in the appropriate directory and unzipped on top of the existing Maximo binaries in the right package/module hierarchy. It may include\n  - Mbo customization\n  - Field validation\n  - MIF customization\n  - Others like Customer specific code\n- Recommend to version your customization archive.\n- Customization archive location is specified during Manage application configuration.\n- When you set the archive file for deployment, you can select the new version of the archive or add version to it using the version field. This will trigger Manage CR to redeploy the changes. The archive is specified as a part of Manage CR spec so that the build process will include it.\n- Customization archive location should be accessible from MAS.\n- Any database scripts can be added to customer directory and a_customer.xml must be used. Follow Maximo [customization guide](https://www.ibm.com/support/knowledgecenter/SSZQTT_7.6.1/com.ibm.mbs.doc/fm_sag/admindb/c_a_customer_xml.html) for more info. All those files need to be part of the customization archive. Updatedb will run after deployment to apply all customer scripts.\n\n\n## Deployment descriptors \n\n- All deployment descriptors such as web.xml and ejb-jar.xml and webservices.xml files customized by customer can be put into customization archive and will be overlaid on the files supplied by IBM. Files will need to be created as follows:\n  - For deployment of full Maximo in one deployment (maximo-all)\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximouiweb\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximo-x\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximo-x\\webmodule\\WEB-INFUI deployment\\web-guest.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximo-x\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maxrestweb\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximo-x\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\mboweb\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\meaweb\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\mboejb\\ejbmodule\\META-INF\\ejb-jar.xml\n  - UI deployment \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-ui\\webmodule\\WEB-INF\\web.xml \n  - MEA deployment \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-mea\\meaweb\\webmodule\\WEB-INF\\web.xml \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-mea\\mboejb\\ejbmodule\\META-INF\\ejb-jar.xml\n  - Report deployment \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-report\\webmodule\\WEB-INF\\web.xml\n  - Cron deployment \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-cron\\webmodule\\WEB-INF\\web.xml\n\n- IBM specific file ibm-ejb-jar-bnd.xml is not used in Liberty deployment.\n\n## XSL Customization\n\n- XSL customizations (that are part of the Maximo ear/war) will be part of customization archive and will be copied to final image(s). Follow existing XSL customization documentation.\n","type":"Mdx","contentDigest":"5c09ea834e9d9c5d0d63edb1a9ed5777","owner":"gatsby-plugin-mdx","counter":139},"frontmatter":{"title":"Customization"},"exports":{},"rawBody":"---\ntitle: Customization\n---           \n\nAll customer specific changes should be included in a customization archive. For example, Java Classes, XMLs, database scripts. The customization archive will be created by a customer and will be placed in a location accessible to MAS during deployment. The structure of customization archive is same as the Maximo folder structure. The customization archive should be tested in a development/test environment before applying to production environment.       \n## Customization Process\nThe following diagram shows the customization process.\n\n![image](images/customizationflow.png)\n\n<p></p>\n\n- **Prepare DB:** Prepare test database as a duplicate of the existing Maximo production database.\n- **Customization Archive:** Create a customization archive by following the steps in the Customization Archive section.\n  - If customization includes web.xml (For example, customer servlet, filters, change in ordering pf the servlet startup, context params, session timeout etc.) then \n     - Install a new Manage 8.0 (with IS and Add-ons) without customization on empty database.\n     - Extract the web.xml (For example, oc rsync command can be used to retrieve the web.xmlß)\n     - Apply your changes. \n     - Copy the web.xml to the customization archive in the appropriate directory.\n- **Deploy:** Use MAS UI/API to configure the Manage, Industry Solutions/Add-Ons to point to the to be upgraded database, and other configurations. Specify the location of the customization archive. Deploy the Manage application.\n- **Activate:** Activate the Manage application. It will update the database and deploy workloads to the liberty containers.\n- **Test:** Test, if any problem is found go to the next step and continue.\n- **Error:** Using the admin image container in the OpenShift env, copy the entire build directory to a local dev machine with the customization and compile. \nAfter fixing errors, create customization archive again with the updated code. Deploy and Activate the Manage application.\n\nOn successful testing, use the customization archive in the production environment.\n\n## Customization Archive \n\nFollow the steps to create customization archive:\n- Follow the existing SMP/Maximo folder structure to create a customization folder.\n- Copy class files (java customization) in the appropriate directory and unzipped on top of the existing Maximo binaries in the right package/module hierarchy. It may include\n  - Mbo customization\n  - Field validation\n  - MIF customization\n  - Others like Customer specific code\n- Recommend to version your customization archive.\n- Customization archive location is specified during Manage application configuration.\n- When you set the archive file for deployment, you can select the new version of the archive or add version to it using the version field. This will trigger Manage CR to redeploy the changes. The archive is specified as a part of Manage CR spec so that the build process will include it.\n- Customization archive location should be accessible from MAS.\n- Any database scripts can be added to customer directory and a_customer.xml must be used. Follow Maximo [customization guide](https://www.ibm.com/support/knowledgecenter/SSZQTT_7.6.1/com.ibm.mbs.doc/fm_sag/admindb/c_a_customer_xml.html) for more info. All those files need to be part of the customization archive. Updatedb will run after deployment to apply all customer scripts.\n\n\n## Deployment descriptors \n\n- All deployment descriptors such as web.xml and ejb-jar.xml and webservices.xml files customized by customer can be put into customization archive and will be overlaid on the files supplied by IBM. Files will need to be created as follows:\n  - For deployment of full Maximo in one deployment (maximo-all)\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximouiweb\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximo-x\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximo-x\\webmodule\\WEB-INFUI deployment\\web-guest.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximo-x\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maxrestweb\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\maximo-x\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\mboweb\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\meaweb\\webmodule\\WEB-INFUI deployment\\web.xml\n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-all\\mboejb\\ejbmodule\\META-INF\\ejb-jar.xml\n  - UI deployment \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-ui\\webmodule\\WEB-INF\\web.xml \n  - MEA deployment \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-mea\\meaweb\\webmodule\\WEB-INF\\web.xml \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-mea\\mboejb\\ejbmodule\\META-INF\\ejb-jar.xml\n  - Report deployment \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-report\\webmodule\\WEB-INF\\web.xml\n  - Cron deployment \n      - deployment\\was-liberty-default\\config-deployment-descriptors\\maximo-cron\\webmodule\\WEB-INF\\web.xml\n\n- IBM specific file ibm-ejb-jar-bnd.xml is not used in Liberty deployment.\n\n## XSL Customization\n\n- XSL customizations (that are part of the Maximo ear/war) will be part of customization archive and will be copied to final image(s). Follow existing XSL customization documentation.\n","fileAbsolutePath":"/home/travis/build/maximo/manage-playbook/src/pages/upgrade/customization.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}