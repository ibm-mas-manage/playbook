{"componentChunkName":"component---src-pages-upgrade-upgradeprocess-mdx","path":"/upgrade/upgradeprocess/","result":{"pageContext":{"frontmatter":{"title":"Upgrade Process"},"relativePagePath":"/upgrade/upgradeprocess.mdx","titleType":"append","MdxNode":{"id":"cf1633c3-8983-506a-9f9b-34096c6afc77","children":[],"parent":"623c5ece-f1de-57ff-8d86-b65680b722c1","internal":{"content":"---\ntitle: Upgrade Process\n---           \n\nThe following diagram shows the upgrade process flow.\n\n![image](images/upgradeprocess.png)\n\n<p> </p>\n\nThe upgrade process consists of test deployment and then production deployment on successful testing. The test deployment consists of five steps.\n- **Prepare DB:**  Prepare test database as a duplicate of the existing Maximo production database.\n- **Install & configure MAS:** Install and configure MAS instance in your OpenShift environment.\n- **Customization:**  Create a customization archive by following the steps in the Customization Archive section (See Customization section for details).\n- **Deploy:** Use MAS UI/API to configure Manage, Industry Solutions/Add-Ons to point to the to be upgraded database, and other configurations. Specify the location of the customization archive. Deploy Manage application.\n- **Activate:** Activate Manage application. It will update the database and deploy workloads to the containers.\n\n- Test and check the logs in case of errors. Fix errors. If the problem is related to customization, copy the entire build directory using the admin image container in the OpenShift environment to a local development machine with the customization and compile. After done, create the customization archive again with the updated code and redeploy and reactivate.\n\n- On successful testing, deploy to production environment.\n\n- **Production Deployment:** Configure OpenShift cluster, install MAS, and all prerequisites. Get all production configuration, database configuration, server bundles configurations, and customization archive if exists. Deploy and Activate the application. The system is production ready.\n\n\n\n","type":"Mdx","contentDigest":"d551d1bf964ca90e01871b88e11c2e6b","counter":135,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Upgrade Process"},"exports":{},"rawBody":"---\ntitle: Upgrade Process\n---           \n\nThe following diagram shows the upgrade process flow.\n\n![image](images/upgradeprocess.png)\n\n<p> </p>\n\nThe upgrade process consists of test deployment and then production deployment on successful testing. The test deployment consists of five steps.\n- **Prepare DB:**  Prepare test database as a duplicate of the existing Maximo production database.\n- **Install & configure MAS:** Install and configure MAS instance in your OpenShift environment.\n- **Customization:**  Create a customization archive by following the steps in the Customization Archive section (See Customization section for details).\n- **Deploy:** Use MAS UI/API to configure Manage, Industry Solutions/Add-Ons to point to the to be upgraded database, and other configurations. Specify the location of the customization archive. Deploy Manage application.\n- **Activate:** Activate Manage application. It will update the database and deploy workloads to the containers.\n\n- Test and check the logs in case of errors. Fix errors. If the problem is related to customization, copy the entire build directory using the admin image container in the OpenShift environment to a local development machine with the customization and compile. After done, create the customization archive again with the updated code and redeploy and reactivate.\n\n- On successful testing, deploy to production environment.\n\n- **Production Deployment:** Configure OpenShift cluster, install MAS, and all prerequisites. Get all production configuration, database configuration, server bundles configurations, and customization archive if exists. Deploy and Activate the application. The system is production ready.\n\n\n\n","fileAbsolutePath":"/home/travis/build/maximo/manage-playbook/src/pages/upgrade/upgradeprocess.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}