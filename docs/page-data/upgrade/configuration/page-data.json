{"componentChunkName":"component---src-pages-upgrade-configuration-mdx","path":"/upgrade/configuration/","result":{"pageContext":{"frontmatter":{"title":"Configuration"},"relativePagePath":"/upgrade/configuration.mdx","titleType":"append","MdxNode":{"id":"ee7227f4-37f7-57de-b941-47ab55514e62","children":[],"parent":"62935a5c-69e2-545d-8b9b-1d36bde3acb3","internal":{"content":"---\ntitle: Configuration\n---           \n\n## Deployment Configuration\n\nWhen the Manage application is deployed in MAS, a Manage deployment CR is created.\n- The Manage deployment CR contains the configuration entered by the user including database URL, server bundle types, deployment sizing etc. \n- The database username/password can be specified from the MAS UI and persisted as a Secret in the cluster. \n- The Manage crypto/cryptox properties can be updated from the MAS UI and persisted as a Secret in the cluster. \n- Both Secrets (username/password, crypto/cryptox) can also be updated from OpenShift CLI. Any change to the values will automatically redeploy (complete/partial) the application.\n\n## Server Bundle\n\nA server bundle (workload) is a logical abstraction for a deployed group of PODs(Point of deployment) in a cluster to perform the same function and provides an access point as a service. These can be accessed as a service internally and through a route externally (a route is a way to expose a service by giving externally-reachable hostname). Through route or service, OpenShift provides load balancing to the PODS included in a server bundle. Each server bundle defines replica size, subdomain, etc.\n\n- For each server bundle, a service is created with name appended by -&ltserverbundlename&gt.\n- A route is created with name appended by -&ltserverbundlename&gt.\n- A default route will be created to point to the service ending with -&ltserverbundlename&gt.\n  - The default route is used by MAS UI to establish the default URL link to the Manage application.\n  \n\nThe following diagram illustrates OpenShift Container Platform routers provide external host name mapping and load balancing of service end points over protocols. The router uses the hostname to determine where to send the external client request.\n\n![image](images/services.png)\n\n\n<p></p>\n\n- The Manage application can be deployed with different server bundles (workloads) for the processing and isolation needs. \n- The deployment can be 'All' bundle server type only or a combination of four bundle server types (UI, Cron, Report, MEA).\n  - If \"All\" bundle server type is not deployed, and you used a combination of the four bundle server types, the \"UI\" bundle server type is required.\n- Each server bundle can have its own server properties.\n\nThis table below shows the five different server bundles types:\n\n<table>\n\n  <tr>\n    <th>Bundle Server Type</th><th>Description</th>\n  </tr>\n\n  <tr>\n    <td>All</td>\n    <td>This bundle type contains all the code.</td>\n  </tr>\n\n  <tr>\n    <td>UI</td>\n    <td>This bundle type contains UI code and supporting code. It is the interface for accessing Manage application.</td>\n  </tr>\n\n   <tr>\n    <td>MEA</td>\n    <td>This bundle exposes the enterprise web services API. </td>\n   </tr>\n\n   <tr>\n    <td>Report</td>\n    <td>This bundle contains the code that is needed to enable BIRT Report Only Server (BROS). Used to separate out the work load that is related to execution of reports that are submitted from the Manage UI. </td>\n   </tr>\n\n   <tr>\n    <td>Cron</td>\n    <td>This bundle contains the code that is needed to run Manage cron tasks.</td>\n   </tr>\n \n</table>\n\n### Services\n\n![image](images/servicesos.png)\n\n### Routes\n\n![image](images/serviceroutes.png)\n\n### Server Bundle Properties\n\n- The server bundle properties can be set from MAS UI or CR directly.\n- A Config Map `<workspaceid>-<serverbundlename>-bundleproperty` will be created for the server properties during deployment (operator reconciliation). It will be mounted to /config/manage/properties on the pod. The bundleLevelProperties file on the pod should not be updated manually.\n- Manage server process will automatically detect the change and update the Manage property cache.\n- If the property value needs to be modified, update the CR directly or from UI, the Manage Operator will reconcile the changes. The Maximo server process will update the Manage property cache with the updated value.\n- Add/Update bundle level properties from MAS admin UI.\n  - Go to Manage application tile, select `Configure Workspace` on top right.\n  - Click on `Show Advance Settings`\n\n![image](images/showadvancesettings.png)\n\n  - Go to Server bundles section. Click on `View` for the server you want to add properties.\n    - `Additional Server bundle properties` dialog will be displayed.\n\t- You can enter the bundle specific properties in the `Bundle level properties` section.\n\t- Click Save.\n\t- Click on `Activate` button on top right to activate your changes.\n  \nSample bundle level property:\n![image](images/bundlelevelprop.png)\n\n  - The bundle level properties can be validated br running following api.\n    - {UI_SERVER_URL}/api/service/system?action=wsmethod:getProperty&propName=mxe.int.webappurl&apikey={API KEY}\n\nSample Custom Resource(CR):\n\n```\n{\n    \"spec\": {\n        \"bindings\": {\n            \"jdbc\": \"workspace-application\"\n        },\n        \"components\": {\n            \"base\": {\n                \"version\": \"latest\"\n            }\n        },\n        \"settings\": {\n            \"db\": {\n                \"maxinst\": {\n                    \"bypassUpgradeVersionCheck\": false,\n                    \"db2Vargraphic\": true,\n                    \"demodata\": false,\n                    \"indexSpace\": \"maximo\",\n                    \"tableSpace\": \"maximo\"\n                },\n                \"dbSchema\": \"MAXIMO\"\n            },\n            \"deployment\": {\n                \"serverBundles\": [\n                \t{\n                    \t\"bundleType\": \"ui\",\n                    \t\"isDefault\": true,\n                    \t\"name\": \"default\",\n                    \t\"replica\": 1,\n                    \t\"routeSubDomain\": \"ui\",\n                    \t\"bundleLevelProperties\": \"mxe.int.webappurl=http://localhost/ui\\nmxe.webclient.activitydashboard=TRUE\"\n                \t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"cron\",\n\t\t\t\t\t\t\"replica\": 1,\n\t\t\t\t\t\t\"bundleType\": \"cron\",\n\t\t\t\t\t\t\"isDefault\": false,\n\t\t\t\t\t\t\"routeSubDomain\": \"cron\",\n\t\t\t\t\t\t\"bundleLevelProperties\": \"mxe.int.webappurl=http://localhost/cron\\nmxe.cronTaskMonitorInterval=30\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"report\",\n\t\t\t\t\t\t\"replica\": 1,\n\t\t\t\t\t\t\"bundleType\": \"report\",\n\t\t\t\t\t\t\"isDefault\": false,\n\t\t\t\t\t\t\"routeSubDomain\": \"report\",\n\t\t\t\t\t\t\"bundleLevelProperties\": \"mxe.report.reportsInAPage=10\\nmxe.int.webappurl=http://localhost/report\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"mea\",\n\t\t\t\t\t\t\"replica\": 1,\n\t\t\t\t\t\t\"bundleType\": \"mea\",\n\t\t\t\t\t\t\"isDefault\": false,\n\t\t\t\t\t\t\"routeSubDomain\": \"mea\",\n\t\t\t\t\t\t\"bundleLevelProperties\": \"mxe.adminEmail=email@ibm.com\\nmxe.int.webappurl=http://localhost/meaweb\"\n\t\t\t\t\t}\n\t\t\t\t]\n        \t}\n    \t}\n    }\n}\n```\n\n## Liberty Server XML\n\n- If you need to customize Liberty server.xml:\n   - The custom server xml can be set from MAS UI. For example, to create queues in JMS server.\n     - If you create in CR directly, then you need to create secret manually. Set this secret to additionalServerConfig.secretname for the bundle server in the CR.\n   - On deployment, a secret will be created for custom server xml. It will mounted to /config/manage/serverxml. This location is included in Liberty's server xml. The configuration is applied to Liberty server.\n\nSample custom server xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<server description=\"new server\">\n    <featureManager>\n          <feature>wmqJmsClient-2.0</feature>\n\t <feature>jmsMdb-3.2</feature>\n    </featureManager>\n\t<logging traceSpecification=\"JMSApi=all:WAS.j2c=all\"/>\n\t<variable name=\"wmqJmsClient.rar.location\" value=\"/wmq/wmq.jmsra.rar\"/>\n\t<jmsConnectionFactory jndiName=\"jms/maximo/int/cf/intcf\" connectionManagerRef=\"MIFJMS\">\n\t\t <properties.wmqJms\n\t\t\ttransportType=\"CLIENT\"\n\t\t\thostName=\"mifjmsmanager-afd7.qm.us-south.mq.appdomain.cloud\"\n\t\t\tport=\"31440\"\n\t\t\tchannel=\"CLOUD.APP.SVRCONN\"\n\t\t\tapplicationName=\"maxliberty\"\n\t\t\tuserName=\"{{username}}\n\t\t\tpassword=\"{{yourpasssword}}\"\n\t\t\tqueueManager=\"MIFJMSMANAGER\"/>\n\t</jmsConnectionFactory>\n\t<connectionManager id=\"MIFJMS\" maxPoolSize=\"20\"/>\n\t<jmsQueue id=\"sqout\" jndiName=\"jms/maximo/int/queues/sqout\">\n      <properties.wmqJms baseQueueName=\"sqout\" baseQueueManagerName=\"MIFJMSMANAGER\"/>\n    </jmsQueue>\n\t<jmsQueue id=\"sqin\" jndiName=\"jms/maximo/int/queues/sqin\">\n      <properties.wmqJms baseQueueName=\"sqin\" baseQueueManagerName=\"MIFJMSMANAGER\"/>\n    </jmsQueue>\n\t<jmsQueue id=\"jms/maximo/int/queues/cqin\" jndiName=\"jms/maximo/int/queues/cqin\">\n      <properties.wmqJms baseQueueName=\"cqin\" baseQueueManagerName=\"MIFJMSMANAGER\"/>\n    </jmsQueue>\n\t<jmsQueue id=\"jms/maximo/int/queues/cqinerr\" jndiName=\"jms/maximo/int/queues/cqinerr\">\n      <properties.wmqJms baseQueueName=\"cqinerr\" baseQueueManagerName=\"MIFJMSMANAGER\"/>\n    </jmsQueue>\n</server>\n```\n\n\n## Attached Docs\n\n### If you are using object storage: \n- No change needed. \n\n### If you are using the file system such as NFS:      \n- The persistent storage (specifically storage software and deployments, storage provisioner, storage classes, and persistent volumes) need to be setup. \n- You need to specify the required storage configuration (volume name, storage class, size, and mount path) from MAS UI (or CR) during the application deployment.\n- The Manage provides a Persistent Claim to claim this storage configuration and setup shared folders inside Manage pods accordingly.  \n- You can set up the same mount path as the doclinks directory you have in your current system and no configuration change will be needed for the doclinks configuration. If you have a different mount path, then the doclinks configuration needs to be updated to point to the new path. \n","type":"Mdx","contentDigest":"cd86092ae18844fcdea63d2c7dfb2079","owner":"gatsby-plugin-mdx","counter":227},"frontmatter":{"title":"Configuration"},"exports":{},"rawBody":"---\ntitle: Configuration\n---           \n\n## Deployment Configuration\n\nWhen the Manage application is deployed in MAS, a Manage deployment CR is created.\n- The Manage deployment CR contains the configuration entered by the user including database URL, server bundle types, deployment sizing etc. \n- The database username/password can be specified from the MAS UI and persisted as a Secret in the cluster. \n- The Manage crypto/cryptox properties can be updated from the MAS UI and persisted as a Secret in the cluster. \n- Both Secrets (username/password, crypto/cryptox) can also be updated from OpenShift CLI. Any change to the values will automatically redeploy (complete/partial) the application.\n\n## Server Bundle\n\nA server bundle (workload) is a logical abstraction for a deployed group of PODs(Point of deployment) in a cluster to perform the same function and provides an access point as a service. These can be accessed as a service internally and through a route externally (a route is a way to expose a service by giving externally-reachable hostname). Through route or service, OpenShift provides load balancing to the PODS included in a server bundle. Each server bundle defines replica size, subdomain, etc.\n\n- For each server bundle, a service is created with name appended by -&ltserverbundlename&gt.\n- A route is created with name appended by -&ltserverbundlename&gt.\n- A default route will be created to point to the service ending with -&ltserverbundlename&gt.\n  - The default route is used by MAS UI to establish the default URL link to the Manage application.\n  \n\nThe following diagram illustrates OpenShift Container Platform routers provide external host name mapping and load balancing of service end points over protocols. The router uses the hostname to determine where to send the external client request.\n\n![image](images/services.png)\n\n\n<p></p>\n\n- The Manage application can be deployed with different server bundles (workloads) for the processing and isolation needs. \n- The deployment can be 'All' bundle server type only or a combination of four bundle server types (UI, Cron, Report, MEA).\n  - If \"All\" bundle server type is not deployed, and you used a combination of the four bundle server types, the \"UI\" bundle server type is required.\n- Each server bundle can have its own server properties.\n\nThis table below shows the five different server bundles types:\n\n<table>\n\n  <tr>\n    <th>Bundle Server Type</th><th>Description</th>\n  </tr>\n\n  <tr>\n    <td>All</td>\n    <td>This bundle type contains all the code.</td>\n  </tr>\n\n  <tr>\n    <td>UI</td>\n    <td>This bundle type contains UI code and supporting code. It is the interface for accessing Manage application.</td>\n  </tr>\n\n   <tr>\n    <td>MEA</td>\n    <td>This bundle exposes the enterprise web services API. </td>\n   </tr>\n\n   <tr>\n    <td>Report</td>\n    <td>This bundle contains the code that is needed to enable BIRT Report Only Server (BROS). Used to separate out the work load that is related to execution of reports that are submitted from the Manage UI. </td>\n   </tr>\n\n   <tr>\n    <td>Cron</td>\n    <td>This bundle contains the code that is needed to run Manage cron tasks.</td>\n   </tr>\n \n</table>\n\n### Services\n\n![image](images/servicesos.png)\n\n### Routes\n\n![image](images/serviceroutes.png)\n\n### Server Bundle Properties\n\n- The server bundle properties can be set from MAS UI or CR directly.\n- A Config Map `<workspaceid>-<serverbundlename>-bundleproperty` will be created for the server properties during deployment (operator reconciliation). It will be mounted to /config/manage/properties on the pod. The bundleLevelProperties file on the pod should not be updated manually.\n- Manage server process will automatically detect the change and update the Manage property cache.\n- If the property value needs to be modified, update the CR directly or from UI, the Manage Operator will reconcile the changes. The Maximo server process will update the Manage property cache with the updated value.\n- Add/Update bundle level properties from MAS admin UI.\n  - Go to Manage application tile, select `Configure Workspace` on top right.\n  - Click on `Show Advance Settings`\n\n![image](images/showadvancesettings.png)\n\n  - Go to Server bundles section. Click on `View` for the server you want to add properties.\n    - `Additional Server bundle properties` dialog will be displayed.\n\t- You can enter the bundle specific properties in the `Bundle level properties` section.\n\t- Click Save.\n\t- Click on `Activate` button on top right to activate your changes.\n  \nSample bundle level property:\n![image](images/bundlelevelprop.png)\n\n  - The bundle level properties can be validated br running following api.\n    - {UI_SERVER_URL}/api/service/system?action=wsmethod:getProperty&propName=mxe.int.webappurl&apikey={API KEY}\n\nSample Custom Resource(CR):\n\n```\n{\n    \"spec\": {\n        \"bindings\": {\n            \"jdbc\": \"workspace-application\"\n        },\n        \"components\": {\n            \"base\": {\n                \"version\": \"latest\"\n            }\n        },\n        \"settings\": {\n            \"db\": {\n                \"maxinst\": {\n                    \"bypassUpgradeVersionCheck\": false,\n                    \"db2Vargraphic\": true,\n                    \"demodata\": false,\n                    \"indexSpace\": \"maximo\",\n                    \"tableSpace\": \"maximo\"\n                },\n                \"dbSchema\": \"MAXIMO\"\n            },\n            \"deployment\": {\n                \"serverBundles\": [\n                \t{\n                    \t\"bundleType\": \"ui\",\n                    \t\"isDefault\": true,\n                    \t\"name\": \"default\",\n                    \t\"replica\": 1,\n                    \t\"routeSubDomain\": \"ui\",\n                    \t\"bundleLevelProperties\": \"mxe.int.webappurl=http://localhost/ui\\nmxe.webclient.activitydashboard=TRUE\"\n                \t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"cron\",\n\t\t\t\t\t\t\"replica\": 1,\n\t\t\t\t\t\t\"bundleType\": \"cron\",\n\t\t\t\t\t\t\"isDefault\": false,\n\t\t\t\t\t\t\"routeSubDomain\": \"cron\",\n\t\t\t\t\t\t\"bundleLevelProperties\": \"mxe.int.webappurl=http://localhost/cron\\nmxe.cronTaskMonitorInterval=30\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"report\",\n\t\t\t\t\t\t\"replica\": 1,\n\t\t\t\t\t\t\"bundleType\": \"report\",\n\t\t\t\t\t\t\"isDefault\": false,\n\t\t\t\t\t\t\"routeSubDomain\": \"report\",\n\t\t\t\t\t\t\"bundleLevelProperties\": \"mxe.report.reportsInAPage=10\\nmxe.int.webappurl=http://localhost/report\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"mea\",\n\t\t\t\t\t\t\"replica\": 1,\n\t\t\t\t\t\t\"bundleType\": \"mea\",\n\t\t\t\t\t\t\"isDefault\": false,\n\t\t\t\t\t\t\"routeSubDomain\": \"mea\",\n\t\t\t\t\t\t\"bundleLevelProperties\": \"mxe.adminEmail=email@ibm.com\\nmxe.int.webappurl=http://localhost/meaweb\"\n\t\t\t\t\t}\n\t\t\t\t]\n        \t}\n    \t}\n    }\n}\n```\n\n## Liberty Server XML\n\n- If you need to customize Liberty server.xml:\n   - The custom server xml can be set from MAS UI. For example, to create queues in JMS server.\n     - If you create in CR directly, then you need to create secret manually. Set this secret to additionalServerConfig.secretname for the bundle server in the CR.\n   - On deployment, a secret will be created for custom server xml. It will mounted to /config/manage/serverxml. This location is included in Liberty's server xml. The configuration is applied to Liberty server.\n\nSample custom server xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<server description=\"new server\">\n    <featureManager>\n          <feature>wmqJmsClient-2.0</feature>\n\t <feature>jmsMdb-3.2</feature>\n    </featureManager>\n\t<logging traceSpecification=\"JMSApi=all:WAS.j2c=all\"/>\n\t<variable name=\"wmqJmsClient.rar.location\" value=\"/wmq/wmq.jmsra.rar\"/>\n\t<jmsConnectionFactory jndiName=\"jms/maximo/int/cf/intcf\" connectionManagerRef=\"MIFJMS\">\n\t\t <properties.wmqJms\n\t\t\ttransportType=\"CLIENT\"\n\t\t\thostName=\"mifjmsmanager-afd7.qm.us-south.mq.appdomain.cloud\"\n\t\t\tport=\"31440\"\n\t\t\tchannel=\"CLOUD.APP.SVRCONN\"\n\t\t\tapplicationName=\"maxliberty\"\n\t\t\tuserName=\"{{username}}\n\t\t\tpassword=\"{{yourpasssword}}\"\n\t\t\tqueueManager=\"MIFJMSMANAGER\"/>\n\t</jmsConnectionFactory>\n\t<connectionManager id=\"MIFJMS\" maxPoolSize=\"20\"/>\n\t<jmsQueue id=\"sqout\" jndiName=\"jms/maximo/int/queues/sqout\">\n      <properties.wmqJms baseQueueName=\"sqout\" baseQueueManagerName=\"MIFJMSMANAGER\"/>\n    </jmsQueue>\n\t<jmsQueue id=\"sqin\" jndiName=\"jms/maximo/int/queues/sqin\">\n      <properties.wmqJms baseQueueName=\"sqin\" baseQueueManagerName=\"MIFJMSMANAGER\"/>\n    </jmsQueue>\n\t<jmsQueue id=\"jms/maximo/int/queues/cqin\" jndiName=\"jms/maximo/int/queues/cqin\">\n      <properties.wmqJms baseQueueName=\"cqin\" baseQueueManagerName=\"MIFJMSMANAGER\"/>\n    </jmsQueue>\n\t<jmsQueue id=\"jms/maximo/int/queues/cqinerr\" jndiName=\"jms/maximo/int/queues/cqinerr\">\n      <properties.wmqJms baseQueueName=\"cqinerr\" baseQueueManagerName=\"MIFJMSMANAGER\"/>\n    </jmsQueue>\n</server>\n```\n\n\n## Attached Docs\n\n### If you are using object storage: \n- No change needed. \n\n### If you are using the file system such as NFS:      \n- The persistent storage (specifically storage software and deployments, storage provisioner, storage classes, and persistent volumes) need to be setup. \n- You need to specify the required storage configuration (volume name, storage class, size, and mount path) from MAS UI (or CR) during the application deployment.\n- The Manage provides a Persistent Claim to claim this storage configuration and setup shared folders inside Manage pods accordingly.  \n- You can set up the same mount path as the doclinks directory you have in your current system and no configuration change will be needed for the doclinks configuration. If you have a different mount path, then the doclinks configuration needs to be updated to point to the new path. \n","fileAbsolutePath":"/home/travis/build/maximo/manage-playbook/src/pages/upgrade/configuration.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}