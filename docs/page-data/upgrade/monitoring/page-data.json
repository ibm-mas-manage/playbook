{"componentChunkName":"component---src-pages-upgrade-monitoring-mdx","path":"/upgrade/monitoring/","result":{"pageContext":{"frontmatter":{"title":"Monitoring"},"relativePagePath":"/upgrade/monitoring.mdx","titleType":"append","MdxNode":{"id":"0264232e-932a-57fb-8752-53659a9ee5d2","children":[],"parent":"70f79034-13c9-51f6-83ef-c523840b8664","internal":{"content":"---\ntitle: Monitoring\n---           \n\nYou can enable monitoring for applications in OpenShift Container Platform.\n\n## Configure Monitoring and Metrics\n\nMonitoring \n\nhttps://docs.openshift.com/container-platform/4.6/monitoring/enabling-monitoring-for-user-defined-projects.html#enabling-monitoring-for-user-defined-projects\n\nMetrics\n\nhttps://docs.openshift.com/container-platform/4.6/monitoring/managing-metrics.html#managing-metrics\n\n## 1. Create Config Map\n- Go to project: `openshift-monitoring` \n- Go to Config Maps and create a config map using the following YAML.\n  - Set the enableUserWorkload setting to true under data/config.yaml\n- Save the file to apply the changes. \n- It will create a new operator and prometheus instance in the openshift-monitoring-user-workload namespace, and this instance is able to monitor servicemonitor kinds in the namespace.\n\nYAML:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n   name: cluster-monitoring-config\ndata:\n  config.yaml: |\n    enableUserWorkload: true\n```\n- $ oc -n openshift-user-workload-monitoring get pod\n\n```\nNAME                                   READY   STATUS        RESTARTS   AGE\nprometheus-operator-6f7b748d5b-t7nbg   2/2     Running       0          3h\nprometheus-user-workload-0             5/5     Running       1          3h\nprometheus-user-workload-1             5/5     Running       1          3h\nthanos-ruler-user-workload-0           3/3     Running       0          3h\nthanos-ruler-user-workload-1           3/3     Running       0          3h\n```\n\n## 2. Create Service \n- Go to Manage project : `mas-<instanceid>-manage`\n  - Create service: `<instanceid>-<workspaceid>-<bundlename>-monitoringagent`\nYAML sample: replace instanceid, workspaceid, and bundlename in the file below:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: <instanceid>-<workspaceid>-<bundlename>\n  name: <instanceid>-<workspaceid>-<bundlename>-monitoragent\n  namespace: mas-<instanceid>-manage\nspec:\n  ports:\n    - name: 9080-tcp\n      protocol: TCP\n      port: 9080\n      targetPort: 9080\n    - name: https\n      protocol: TCP\n      port: 9444\n      targetPort: 9444\n  selector:\n    app: <instanceid>-<workspaceid>-<bundlename>\n  type: ClusterIP\n```\n## 3. Create Service Monitor CRD (Custom Resource Definition)\n- Go to project: `mas-instanceid>-manage`\n- Create ServiceMonitor CRD: `<instanceid>-<workspaceid>-<bundlename>-monitoragent`\n\t\t\nSample YAML\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    k8s-app: <instanceid>-<workspaceid>-<bundlename>-monitoragent\n  name: <instanceid>-<workspaceid>-<bundlename>-monitoragent\n  namespace: mas-<instanceid>-manage\nspec:\n  endpoints:\n  - interval: 1d\n    port: 9080-tcp\n    scheme: http\n  selector:\n    matchLabels:\n      app: <instanceid>-<workspaceid>-<bundlename> \n```\n\n\n## Querying Metrics\n\n- Go to Montoring->Metrics. The following Maximo queries are available:\n\n<table>\n  <tr>\n    <th>Query</th>\n    <th>Description</th>\n  </tr>\n\n  <tr>\n    <td>maximo_mbo_count</td>\n    <td>Business object count </td>\n </tr>\n <tr>\n    <td>maximo_heap_memory_max_count </td>\n    <td>Maximum heap</td>\n </tr>\n <tr>\n    <td>maximo_heap_memory_used_count</td>\n    <td>Used heap</td>\n </tr>\n <tr>\n    <td>maximo_thread_pool_size</td>\n    <td>Thread pool size</td>\n </tr>\n <tr>\n    <td>maximo_thread_deadlock </td>\n    <td>Deadlock threads</td>\n </tr>\n <tr>\n    <td>maximo_thread_count</td>\n    <td>Thread Count</td>\n </tr>\n\n <tr>\n    <td>maximo_thread_pool_active_count</td>\n    <td>Thread pool active count</td>\n </tr>\n\n<tr>\n    <td>maximo_thread_pool_active_count</td>\n    <td>Thread pool active count</td>\n</tr>\n\n<tr>\n    <td>maximo_thread_peak_count</td>\n    <td>Thread pool peak count</td>\n</tr>\n\n<tr>\n    <td>maximo_db_connection_free_count</td>\n    <td>Free number of DB connections</td>\n</tr>\n\n<tr>\n    <td>maximo_db_connection_used_count </td>\n    <td>Used number of DB connections</td>\n</tr>  \n\n<tr>\n    <td>maximo_db_connection_total_count </td>\n    <td>Total number of DB connections</td>\n</tr>        \n\n<tr>\n    <td>maximo_session_stats_active_count </td>\n    <td>Count of active sessions</td>\n</tr>        \n\n<tr>\n    <td>maximo_session_stats_live_count </td>\n    <td>Count of live sessions</td>\n</tr>        \n\n<tr>\n    <td>maximo_session_stats_create_count </td>\n    <td>Count of session stats created on Liberty</td>\n</tr>        \n</table>\n\n\n- Click on the detail icon to get the list of queries:\n\n![image](images/maxqueries.png)\n\n\n<p></p>\n- Sample Graph\n\n![image](images/metrics.png)\n\n\n## Garfana\n\n- Follow the link to setup Grafana\n  - https://github.com/ibm-watson-iot/iot-docs/tree/master/monitoring#3-grafana-setup\n  \n- Sample Dashboard\n\n![image](images/grafana.png)\n","type":"Mdx","contentDigest":"cb17826feda87c8fcf0b2c79e8e4a54b","owner":"gatsby-plugin-mdx","counter":232},"frontmatter":{"title":"Monitoring"},"exports":{},"rawBody":"---\ntitle: Monitoring\n---           \n\nYou can enable monitoring for applications in OpenShift Container Platform.\n\n## Configure Monitoring and Metrics\n\nMonitoring \n\nhttps://docs.openshift.com/container-platform/4.6/monitoring/enabling-monitoring-for-user-defined-projects.html#enabling-monitoring-for-user-defined-projects\n\nMetrics\n\nhttps://docs.openshift.com/container-platform/4.6/monitoring/managing-metrics.html#managing-metrics\n\n## 1. Create Config Map\n- Go to project: `openshift-monitoring` \n- Go to Config Maps and create a config map using the following YAML.\n  - Set the enableUserWorkload setting to true under data/config.yaml\n- Save the file to apply the changes. \n- It will create a new operator and prometheus instance in the openshift-monitoring-user-workload namespace, and this instance is able to monitor servicemonitor kinds in the namespace.\n\nYAML:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n   name: cluster-monitoring-config\ndata:\n  config.yaml: |\n    enableUserWorkload: true\n```\n- $ oc -n openshift-user-workload-monitoring get pod\n\n```\nNAME                                   READY   STATUS        RESTARTS   AGE\nprometheus-operator-6f7b748d5b-t7nbg   2/2     Running       0          3h\nprometheus-user-workload-0             5/5     Running       1          3h\nprometheus-user-workload-1             5/5     Running       1          3h\nthanos-ruler-user-workload-0           3/3     Running       0          3h\nthanos-ruler-user-workload-1           3/3     Running       0          3h\n```\n\n## 2. Create Service \n- Go to Manage project : `mas-<instanceid>-manage`\n  - Create service: `<instanceid>-<workspaceid>-<bundlename>-monitoringagent`\nYAML sample: replace instanceid, workspaceid, and bundlename in the file below:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: <instanceid>-<workspaceid>-<bundlename>\n  name: <instanceid>-<workspaceid>-<bundlename>-monitoragent\n  namespace: mas-<instanceid>-manage\nspec:\n  ports:\n    - name: 9080-tcp\n      protocol: TCP\n      port: 9080\n      targetPort: 9080\n    - name: https\n      protocol: TCP\n      port: 9444\n      targetPort: 9444\n  selector:\n    app: <instanceid>-<workspaceid>-<bundlename>\n  type: ClusterIP\n```\n## 3. Create Service Monitor CRD (Custom Resource Definition)\n- Go to project: `mas-instanceid>-manage`\n- Create ServiceMonitor CRD: `<instanceid>-<workspaceid>-<bundlename>-monitoragent`\n\t\t\nSample YAML\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    k8s-app: <instanceid>-<workspaceid>-<bundlename>-monitoragent\n  name: <instanceid>-<workspaceid>-<bundlename>-monitoragent\n  namespace: mas-<instanceid>-manage\nspec:\n  endpoints:\n  - interval: 1d\n    port: 9080-tcp\n    scheme: http\n  selector:\n    matchLabels:\n      app: <instanceid>-<workspaceid>-<bundlename> \n```\n\n\n## Querying Metrics\n\n- Go to Montoring->Metrics. The following Maximo queries are available:\n\n<table>\n  <tr>\n    <th>Query</th>\n    <th>Description</th>\n  </tr>\n\n  <tr>\n    <td>maximo_mbo_count</td>\n    <td>Business object count </td>\n </tr>\n <tr>\n    <td>maximo_heap_memory_max_count </td>\n    <td>Maximum heap</td>\n </tr>\n <tr>\n    <td>maximo_heap_memory_used_count</td>\n    <td>Used heap</td>\n </tr>\n <tr>\n    <td>maximo_thread_pool_size</td>\n    <td>Thread pool size</td>\n </tr>\n <tr>\n    <td>maximo_thread_deadlock </td>\n    <td>Deadlock threads</td>\n </tr>\n <tr>\n    <td>maximo_thread_count</td>\n    <td>Thread Count</td>\n </tr>\n\n <tr>\n    <td>maximo_thread_pool_active_count</td>\n    <td>Thread pool active count</td>\n </tr>\n\n<tr>\n    <td>maximo_thread_pool_active_count</td>\n    <td>Thread pool active count</td>\n</tr>\n\n<tr>\n    <td>maximo_thread_peak_count</td>\n    <td>Thread pool peak count</td>\n</tr>\n\n<tr>\n    <td>maximo_db_connection_free_count</td>\n    <td>Free number of DB connections</td>\n</tr>\n\n<tr>\n    <td>maximo_db_connection_used_count </td>\n    <td>Used number of DB connections</td>\n</tr>  \n\n<tr>\n    <td>maximo_db_connection_total_count </td>\n    <td>Total number of DB connections</td>\n</tr>        \n\n<tr>\n    <td>maximo_session_stats_active_count </td>\n    <td>Count of active sessions</td>\n</tr>        \n\n<tr>\n    <td>maximo_session_stats_live_count </td>\n    <td>Count of live sessions</td>\n</tr>        \n\n<tr>\n    <td>maximo_session_stats_create_count </td>\n    <td>Count of session stats created on Liberty</td>\n</tr>        \n</table>\n\n\n- Click on the detail icon to get the list of queries:\n\n![image](images/maxqueries.png)\n\n\n<p></p>\n- Sample Graph\n\n![image](images/metrics.png)\n\n\n## Garfana\n\n- Follow the link to setup Grafana\n  - https://github.com/ibm-watson-iot/iot-docs/tree/master/monitoring#3-grafana-setup\n  \n- Sample Dashboard\n\n![image](images/grafana.png)\n","fileAbsolutePath":"/home/travis/build/maximo/manage-playbook/src/pages/upgrade/monitoring.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}